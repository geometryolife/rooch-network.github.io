<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://rooch.network/blog</id>
    <title>Rooch Network Blog</title>
    <updated>2023-02-18T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://rooch.network/blog"/>
    <subtitle>Rooch Network Blog</subtitle>
    <icon>https://rooch.network/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Why Move? From the Perspective of Programming Language Ecosystem Building]]></title>
        <id>why-move-ecosystem</id>
        <link href="https://rooch.network/blog/why-move-ecosystem"/>
        <updated>2023-02-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[As a proponent of the Move programming language, every time I promote Move to developers, I always encounter the same question: What are the advantages of Move? Why Move?]]></summary>
        <content type="html"><![CDATA[<p>As a proponent of the Move programming language, every time I promote Move to developers, I always encounter the same question: <strong>What are the advantages of Move? Why Move?</strong> </p><p>It's like introducing your new lover to a friend - you always face similar questions. However, this question is not easy to answer. If we list the pros and cons one by one, there will always be people who question them. After all, the ecosystem of a new language is not yet mature, and the choice can only be based on its potential. Let me make a statement: <strong>Move has the most potential programming language to build an ecosystem like Solidity, and even surpass Solidity</strong>.</p><blockquote><p>Target audience: Developers who are interested in the technology of the blockchain field. This article hopes to explain the current challenges faced by smart contracts and some solutions of Move in a simple way, with minimal use of code, so that readers who do not understand programming languages can also roughly understand it. Feedback from readers is appreciated.</p></blockquote><blockquote><p>This article was written in May 2022, when Move was just emerging and there was no current scale. I translated and reposted it here,<a href="https://jolestar.com/why-move-1" target="_blank" rel="noopener noreferrer">original link</a>.</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="two-paths-of-smart-contract">Two Paths of Smart Contract<a class="hash-link" href="#two-paths-of-smart-contract" title="Direct link to heading">​</a></h2><p>If we go back a few years, there were mainly two ways to support Turing-complete smart contracts on new public chains.</p><p>One is to tailor existing programming languages and run them on universal virtual machines such as WASM. The advantage of this approach is that the current programming languages and WASM virtual machine ecosystem can be reused.</p><p>The other is to create a new smart contract programming language and virtual machine from scratch, like Solidity and Move.</p><p>At that time, many people were actually not optimistic about the Solidity&amp;EVM ecosystem. They thought that Solidity was only useful for token issuance, had poor performance, weak tools, and was like a toy. The goal of many chains was to enable developers to use existing languages for smart contract programming, and the first path was more favored. There were few new public chains that directly copied Solidity&amp;EVM.</p><p>However, after several years of development, especially with the rise of DeFi, people suddenly found that the Solidity ecosystem was different. The smart contract ecosystem that took the first path did not grow up. Why? I summarize a few reasons.</p><ol><li>The blockchain's program runtime environment is very different from the operating system's program runtime environment. If we discard the libraries related to system calls, file IO, hardware, network, concurrency, and consider the execution cost on-chain, the amount of libraries that can share with smart contracts is very limited.</li><li>The first solution theoretically supports many languages, but in reality, programming languages with a runtime compiled into a virtual machine similar to WASM result in very large files, making it unsuitable for use in blockchain scenarios. The only ones that can be used are mainly C, C++, Rust, etc. without a runtime. The learning curve of these languages is not lower than the cost of smart contract programming languages like Solidity. Supporting multiple languages at the same time may lead to the fragmentation of early ecosystems.</li><li>Each blockchain has a different state handling mechanism, so even if they all use WASM virtual machines, smart contract applications on each blockchain cannot be directly migrated, and they cannot share a common programming language and developer ecosystem.</li></ol><p>For application developers, they directly face smart contract programming languages, the basic libraries of programming languages, and whether there are reusable opensource libraries. The security of DeFi requires smart contract code to be audited, and every line of audited code represents money. If developers can slightly modify and copy existing code, they can reduce audit costs.</p><p>Now it seems that although Solidity took a seemingly slow path, it actually built its ecosystem faster. Many people now believe that Solidity&amp;EVM is the endpoint of smart contracts, and many chains are beginning to support or port Solidity&amp;EVM. </p><p>At this point, a new smart contract programming language needs to prove that it has stronger ecosystem building capabilities to convince people to pay attention to and learn to use it.</p><p>So the new question is, how to measure the ecosystem building capabilities of a programming language?</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="programming-languages-ecosystem-building-ability">Programming language's ecosystem building ability<a class="hash-link" href="#programming-languages-ecosystem-building-ability" title="Direct link to heading">​</a></h2><p>The ecosystem building ability of a programming language refers to its code reuse capability, which mainly manifests in two aspects:</p><ol><li>The dependency method between modules of the programming language.</li><li>The combination method between modules of the programming language. </li></ol><p>"Composability" is a feature touted by smart contracts, but in fact, programming languages all have composability. We invented interfaces, traits to make composition more convenient.</p><p>Let's talk about the dependency method first. </p><p>Programming languages typically implement dependencies through three methods:</p><ol><li>Using static libraries, which statically link dependencies during compilation and package them in the same binary.</li><li>Using dynamic libraries, which dynamically link dependencies at runtime. The dependencies are not included in the binary, but must be deployed on the target platform in advance.</li><li>Depending on remote procedure calls (RPC) at runtime. This refers to various APIs that can be called remotely.</li></ol><p>Methods 1 and 2 are generally used in the common library. Common libraries are usually stateless, as it is difficult to assume how an application handles state, such as which file to write to or which database table to store in. </p><p>This kind of call occurs in the same process and method call context, sharing the call stack and memory space, with no strong isolation (or weak isolation), and requires a trusted environment.</p><p>Method 3 actually calls another process or a process on another machine, communicating with each other through messages, and each process is responsible for its own state. Therefore, state dependencies can be provided, and the call also has security isolation.</p><p>Each of these three methods has its pros and cons. </p><p>Method 1 includes the dependency libraries in the final binary, which has the advantage of not requiring the target platform environment, but the disadvantage of producing a larger binary. </p><p>Method 2 has the advantage of producing a smaller binary, but requires a runtime environment. </p><p>Method 3 can build cross-language dependency relationships and is generally used in scenarios involving cross-service or cross-organization collaboration. To facilitate developer calls, it is generally simulated as a method call through SDK or code generation.</p><p>In the history of technology, many programming languages and operating system platforms have spent a lot of effort trying to bridge the gap between remote and local calls, trying to achieve seamless remote calling and composition. </p><p>Just mention a few famous technical terms, such as COM (Component Object Model), CORBA, SOAP, REST, etc., all of which are used to solve these problems. Although the dream of seamless call has been shattered, and everyone finally relied on engineers to manually connect interfaces, splicing together the entire Web2 service, the dream is still alive.</p><p>Smart contracts have brought new changes to the dependency methods between applications.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="changes-brought-by-smart-contracts">Changes brought by Smart Contracts<a class="hash-link" href="#changes-brought-by-smart-contracts" title="Direct link to heading">​</a></h2><p>The dependency between traditional enterprise applications can be illustrated by the following figure:</p><p><img loading="lazy" src="https://jolestar.com/images/why-move/web2-system-rpc-call.png" alt="web2 system rpc call" class="img_ev3q"></p><ol><li>Systems are connected through various RPC protocols, linking services running on different machines.</li><li>Various technical and manual "walls" are put in place between machines to ensure security.</li></ol><p>In contrast, the execution environment of a smart contract is a sandbox environment constructed by the node of the blockchain. Multiple contract programs run in different virtual machine sandboxes within the same process, as shown in the following figure:</p><p><img loading="lazy" src="https://jolestar.com/images/why-move/blockchain-smartcontract-call.png" alt="blockchain smart contract call" class="img_ev3q"></p><ol><li>Calls between contracts are calls between different smart contract virtual machines within the same process.</li><li>Security depends on the isolation between smart contract virtual machines.</li></ol><p>Using Solidity as an example, Solidity contracts (modules indicated as <code>contract</code>) declare their functions as public, and then other contracts can directly call the contract through this public method. </p><p>An RPC call process is shown in the following figure:</p><p><img loading="lazy" src="https://jolestar.com/images/why-move/rpc.png" alt="rpc" class="img_ev3q"></p><blockquote><p>Image source <a href="https://docs.microsoft.com/en-us/windows/win32/rpc/how-rpc-works" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/en-us/windows/win32/rpc/how-rpc-works</a></p></blockquote><p>In fact, the blockchain takes over all the communication processes between the Client and Server in the above figure, automatically generates stubs, implements serialization and deserialization, and makes developers feel that remote calls are just like local method calls.</p><p>Of course, there is no silver bullet in technology, and new solutions always bring new challenges that need to be addressed.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-dependency-challenge-of-smart-contracts">The Dependency Challenge of Smart Contracts<a class="hash-link" href="#the-dependency-challenge-of-smart-contracts" title="Direct link to heading">​</a></h2><p>Through the previous analysis, we understand that the invocation between smart contracts is actually a method similar to remote invocation. But what if we want to call dependencies through libraries?</p><p>In Solidity, a module indicated as <code>library</code> is equivalent to a static library and must be stateless. </p><p>The dependency on a library will be packaged into the final contract binary during compilation.</p><p>This creates a problem: if the contract is complex and has too many dependencies, the compiled contract will be too large to be deployed. However, if it is divided into multiple contracts, it will not be possible to directly share the state, and internal dependencies will become dependencies between remote services, increasing the call cost.</p><p>Can we use the second solution, loading dynamic libraries? For example, most contracts on Ethereum depend on the <code>SafeMath.sol</code> library, and each contract contains its binary. Since the bytecode is on the chain, why can't it be directly shared?</p><p>Therefore, Solidity provides the <code>delegatecall</code> method, similar to the dynamic linking library solution, which load the bytecode of another contract into the context of the current contract, allowing the other contract to directly read and write the state of the current contract. But this requires two things:</p><ol><li>The calling and called parties must have a completely trusted relationship.</li><li>The state of the two contracts must be aligned.</li></ol><p>Non-smart contract developers may not understand this issue. If you are a Java developer, you can think of each Solidity contract as a Class. Once deployed, it runs as a singleton Object. If you want to load a method from another Class at runtime to modify the properties of the current Object, the fields defined in these two Classes must be the same, and the newly loaded method is equivalent to an internal method, with full access to the internal properties of the Object.</p><p>This limits the use case and reuse of dynamic linking, and it is now mainly used for internal contract upgrades.</p><p>Because of the above reasons, it is difficult for Solidity to provide a rich standard library (stdlib) like other programming languages, to be deployed on the chain in advance and depended on by other contracts. It can only provide a few limited precompiled methods.</p><p>This has also led to the inflation of EVM bytecode. Many data that could have been obtained from the state via system contract code were forced to be implemented through virtual machine instructions. For example, instructions such as <code>BLOCKHASH</code>, <code>BASEFEE</code>, and <code>BALANCE</code>, the programming language itself does not need to know the chain-related information.</p><p>This problem is encountered by all chains and smart contract programming languages. Traditional programming languages did not consider security issues within the same method call stack, and when moved to the chain, they can only rely on static dependencies and remote dependencies to solve the dependency relationship. Generally, even a delegatecall solution like Solidity is difficult to provide.</p><p>So how can we achieve a way of calling between smart contracts similar to dynamic library linking? Can the invocation between contracts share the same method call stack and directly pass variables?</p><p>This approach brings two security challenges:</p><ol><li>The security of the contract's state must be isolated through the security of the programming language itself, rather than relying on the virtual machine for isolation.</li><li>The cross-contract variable transfer needs to ensure safety and prevent arbitrary discarding, especially for variables that express asset types.</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="state-isolation-for-smart-contracts">State Isolation for Smart Contracts<a class="hash-link" href="#state-isolation-for-smart-contracts" title="Direct link to heading">​</a></h2><p>As mentioned earlier, a smart contract actually executes code from different organization in the same process. Therefore, it is necessary to isolate the contract's state (which can be simply understood as the results generated when the contract is executed, which need to be saved for use in the next execution) to avoid security problems caused by allowing one contract to directly read and write the state of another contract.</p><p>The isolation solution is actually easy to understand - give each contract an independent state space. When executing a smart contract, the current smart contract's state space is bound to the virtual machine, which means that the smart contract can only read its own state. If another contract needs to be read, it needs to use the contract invocation mentioned earlier, which is actually executed in another virtual machine.</p><p>However, this isolation is not enough when using dynamic libraries for dependencies. Because another contract is running in the execution stack of the current contract, we need language-level isolation rather than virtual machine isolation.</p><p>In addition, the state space isolation based on contracts also brings up the issue of state ownership. In this case, all states belong to the contract, and there is no distinction between the public states of contracts and the personal states of users. This makes it difficult to calculate state fees, and in the long run, there will be a problem of state explosion.</p><p>So how can we achieve state isolation in smart contract languages? The idea is actually simple - based on types.</p><ol><li>Utilize the visibility constraints that programming languages provide for types, a feature that most programming languages support.</li><li>Utilize the mutability constraints that programming languages provide for variables. Many programming languages differentiate between mutable and immutable references, such as Rust.</li><li>Provide external storage based on types as keys, limiting the current module to only read external storage using the types it defines as keys.</li><li>Provide the ability to declare copy and drop for types in programming languages, ensuring that asset-like variables cannot be copied or discarded.</li></ol><p>The Move language uses the above solutions, with points 3 and 4 being unique to Move. This solution is also easy to understand because if we cannot give each smart contract program a separate state space at the virtual machine level, then using types for state isolation is a relatively easy-to-understand way because types have clear ownership and visibility.</p><p>In Move, the smart contract invocation between different organizations and programs is as shown in the following figure:</p><p><img loading="lazy" src="https://jolestar.com/images/why-move/move-module-call.png" alt="move module call" class="img_ev3q"></p><p>Different programs from different organizations are combined into the same application and run through dynamic libraries, sharing the same memory world of the programming language. Organizations can pass <code>messages</code>, also pass <code>references</code> and <code>resources</code> to each other. The rules and protocols for interaction between organizations are only constrained by the rules of the programming language. (The definition of <code>resources</code> will be described later in the article.)</p><p>This change brings several advantages:</p><ol><li>The programming language and the chain can provide a rich library that can be deployed on the chain in advance(called XChain-Framework). Applications can directly depend on and reuse it, without including the std library in their own binaries.</li><li>Since the code of different organizations is in the same memory world state of the same programming language, richer and more complex combination methods can be provided. This topic will be described in detail later.</li></ol><p>The dependency mechanism of Move, while similar to the dynamic library pattern, also utilizes the state-managing feature of the chain, bringing a new dependency pattern to programming languages.</p><p>In this pattern, the chain serves both as the execution environment for smart contracts and the binary repository for smart contract programs. </p><p>Developers can freely combine smart contracts on the chain through dependencies to provide a new smart contract program, and this dependency relationship is traceable on the chain.</p><p>Of course, Move is still in its early stages, and the capabilities provided by this dependency mechanism have not been fully utilized, but the prototype has emerged. </p><p>It can be imagined that in the future, incentive mechanisms based on dependency relationships will definitely appear, as well as new open source ecosystems built on this incentive model. </p><p>Later, we will continue to discuss the issue of "composability".</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="composability-of-smart-contracts">Composability of Smart Contracts<a class="hash-link" href="#composability-of-smart-contracts" title="Direct link to heading">​</a></h2><p>Composability between programming language modules is another important feature of building a programming language ecosystem. It can be said that it is the composability between modules that needs dependencies, and different dependency methods provide different composability.</p><p>According to the analysis of dependency methods above, when discussing the composability of smart contracts in the Solidity ecosystem, it actually mainly refers to the combination of <code>contract</code>, not the combination of <code>library</code>. As mentioned earlier, the dependency between contracts is a type of dependency similar to remote invocation. What is actually passed between them is a message, not a <code>reference</code> or <code>resource</code>.</p><p>Here, the term <code>resource</code> is used to emphasize that this type of variable cannot be copied or discarded arbitrarily within the program, which is a feature of linear types that is not yet popular in programming languages.</p><p>Linear types come from linear logic, and linear logic itself is designed to express logic related to resource consumption that classical logic cannot express. </p><p>For example, if we have "milk," we can infer "cheese" logically, but we cannot express resource consumption or the logic that X units of "milk" can produce Y units of "cheese". Therefore, linear logic and linear types were developed, which can be applied in programming languages.</p><p>The first resource to be managed in programming languages is memory. Therefore, one application scenario of linear types is to track the use of memory to ensure that memory resources are properly reclaimed, such as in Rust. However, if this feature is widely promoted, we can simulate and express any type of <code>resource</code> in the program.</p><p>So why is it important to pass resources during composition? Let's first understand the current composition method based on <code>Interface</code>, which is the composition method used by most programming languages, including Solidity.</p><p>The most important thing when combining multiple modules is to agree on the functions to be called, as well as the parameter and return value types of the functions, which are generally called the "signature" of the function. We usually use <code>Interface</code> to define these constraints, but the specific implementation is left to each party.</p><p>For example, the ERC20 Token that people often talk about is an Interface that provides the following methods:</p><div class="language-solidity codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-solidity codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">function balanceOf(address _owner) public view returns (uint256 balance)</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">function transfer(address _to, uint256 _value) public returns (bool success)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The definition of this interface includes a method for transferring Token to a specific address and a method for checking the balance, but there is no direct method for withdrawing Token. This is because in Solidity, tokens are a service rather than a type. Here is a similar method defined in Move:</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">module Token{</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">   struct Token&lt;TokenType&gt;{</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      value: u128,</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">   }</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">}</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">module Account{</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    withdraw(sender: &amp;signer, amount):Token&lt;STC&gt;;</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    deposit(receiver: address, token: Token&lt;STC&gt;);</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    transfer(sender, receiver, amount);</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>As you can see, Token is a type, and a Token object can be withdrawn from an account. Some may ask, what is the significance of doing this?</p><p>We can compare the two methods of combination using a common analogy. A Token object is similar to cash in everyday life. When you want to buy something from a store, there are two payment methods:</p><ol><li>The store and the bank have an interface connection to an electronic payment system. When you pay, you initiate a request to the bank to transfer the funds to the store.</li><li>You withdraw cash from the bank and pay at the store. In this case, the store does not need to connect to the bank interface in advance, it just needs to accept this type of cash. As for whether the store locks the cash in a safe or continues to deposit it in the bank after receiving it, that is up to the store to decide.</li></ol><p>The second type of combination method can be called a <strong>resource-based combination</strong> method. We can refer to the resource that flows between contracts of different organizations as "<strong>free state</strong>".</p><p>The resource-based combination method is more similar to the combination method in the physical world, such as CDs and players, various machine components. This combination method is not in conflict with the interface-based combination method. For example, if multiple exchanges (swap) want to provide a unified interface for external integration, using the interface-based combination method is more appropriate.</p><p>There are two key advantages of the resource-based composition:</p><ol><li>It can effectively reduce the nesting depth of interface-based composition. (flash loans is a good example for this but considering that some readers may not be familiar with the background of flash loans, I won't elaborate on it here).</li><li>It can clearly separate the definition of resources from the behavior based on resources. </li></ol><p>A typical example is the NFT for soulbound.
The concept of NFT for soulbound was proposed by Vitalik. It is intended to use NFT to express a certain identity relationship, which should not be transferable, such as graduation certificates, honor certificates, etc.</p><p>However, the NFT standards on ETH are all interfaces, such as several methods in ERC721:</p><div class="language-solidity codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-solidity codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">function ownerOf(uint256 _tokenId) external view returns (address);</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>If you want to extend new behaviors, such as <code>binding</code>, you need to define new interfaces. This will also affect old methods, such as transferring NFT. If the NFT has been soulbound, it cannot be transferred, which will inevitably bring about compatibility issues. Even more challenging is the scenario where it is initially allowed to transfer but becomes untransferable after binding, such as some game props.</p><p>But if we think of NFT as an item, the item itself only determines how it is displayed and what properties it has. Whether it can be transferred should be encapsulated at the upper level.</p><p>For example, the following NFT defined using Move is a type.</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">struct NFT&lt;NFTMeta: copy + store + drop, NFTBody: store&gt; has store {</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    creator: address,</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    id: u64,</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    base_meta: Metadata,</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    type_meta: NFTMeta,</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    body: NFTBody,</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Then we can imagine the upper-level encapsulation as different containers with different behaviors. For example, when NFT is placed in a personal gallery, it can be taken out, but once it is placed in some special container, it requires other rules to be met before it can be taken out, which realizes "binding".</p><p>For example, Starcoin's NFT standard implements a container for soulbound NFT called IdentifierNFT:
(The code is simplified)</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">/// IdentifierNFT contains an Option&lt;NFT&gt; which is empty by default, it is like a box that can hold NFTs</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">struct IdentifierNFT has key {</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        nft: Option&lt;NFT&lt;T&gt;&gt;,</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">}</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">/// Users initialize an empty IdentifierNFT under their own account through the `accept` method</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">public fun accept&lt;T&gt;(sender: &amp;signer);</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">/// Developers grant the NFT to receiver by using the MintCapability, and embed the NFT into the IdentifierNFT</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">public fun grant_to&lt;T&gt;(_cap: &amp;mut MintCapability, receiver: address, nft: NFT&lt;T&gt;);</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">/// Developers can also take out the NFT in the IdentifierNFT of `owner` using the BurnCapability</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">public fun revoke(_cap: &amp;mut BurnCapability, owner: address): NFT&lt;T&gt;;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The NFT in this box can only be granted or revoked by the issuer of the NFT, while the user can only decide whether to accept it or not. For example, in the case of a graduation certificate, the school can issue and revoke it. Of course, developers can also implement other rules for the container, but the NFT standard is unified. For readers interested in the specific implementation, please refer to the link at the end of the article.</p><p>This section illustrates a new way of combining things in Move based on linear types. However, the advantage of language features alone cannot naturally bring about an ecosystem of programming languages; there must also be application scenarios. Let's continue to discuss the application scenario expansion of the Move language.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="expanding-the-application-scenarios-of-smart-contracts">Expanding the Application Scenarios of Smart Contracts<a class="hash-link" href="#expanding-the-application-scenarios-of-smart-contracts" title="Direct link to heading">​</a></h2><p>Move, originally designed as the smart contract programming language for the Libra.</p><p>At the time, we were designing the architecture of Starcoin, and considering that Move's features aligned perfectly with Starcoin's goals, so applied Move to the public chain scenario.</p><p>Later on, after the Libra project was abandoned, several public chain projects were incubated to explore different directions:</p><ul><li>MystenLabs' Sui introduced immutable states, attempting to implement a UTXO-like programming model in Move.</li><li>Aptos explored the parallel execution of transactions on Layer1 and high performance.</li><li>Pontem attempted to bring Move into the Polkadot ecosystem.</li><li>Starcoin explored the layered scaling solution of Layer2 and even Layer3.</li></ul><p>Meanwhile, the original Move team at Meta (Facebook) is attempting to run Move on Evm, although this may result in losing the feature of transferring <code>resource</code> between contracts, it helps to expand the Move ecosystem and merge it with the Solidity ecosystem.</p><p>Currently, the Move project has been spun off as a completely community-driven programming language. It faces several challenges:</p><ol><li>How to find the greatest common denominator between the requirements of different chains to ensure the language's universality.</li><li>How to allow different chains to implement their own specific language extensions.</li><li>How to share basic libraries and application ecosystems among multiple chains.</li></ol><p>These challenges are also opportunities, and they conflict with each other, requiring trade-offs, and a balancing act to be found in development.</p><p>These challenges are also opportunities, but they conflict with each other, requiring trade-offs and move community need to find a balance in development progresses.No language has attempted this kind of endeavor before. This balance can ensure that Move can explore more application scenarios, not just those tied to blockchain.</p><p>In this regard, one problem that Solidity/EVM are entirely tied to the chain, and running EVM requires simulating a chain environment. This limits Solidity from expanding to other scenarios.</p><p>There are many different views on the future of smart contract programming languages, broadly speaking, there are four types:</p><ol><li>There is no need for a Turing-complete smart contract language, Bitcoin's script is enough. Without a Turing-complete smart contract language, it is difficult to achieve universal arbitration capabilities and will limit the application scenarios of the chain. This can be seen in my previous article "Opening the 'Three Locks' of Bitcoin Smart Contracts."</li><li>There is no need for a new smart contract language, existing programming languages are enough, as we have analyzed above.</li><li>A Turing-complete smart contract language is needed, but the application scenario is limited to the chain, similar to stored procedure scripts in database. This is the view of most current smart contract developers.</li><li>Smart contract programming languages will be promoted to other scenarios and ultimately become a universal programming language.</li></ol><p>The last one can be called the maximalist of smart contract languages, and I personally hold this view. </p><p>The reason is simple: in the Web3 world, whether it's a game or other applications, there needs to be a digital dispute arbitration solution if there is a dispute. The key technology points of blockchain and smart contracts are about proof of state and computation, and the arbitration mechanism developed in this field can be used in more general scenarios. When a user installs an application, is concerned about its security, and wants the application to provide proof of state and computation, that is, when the application developer must choose to use smart contracts to implement the core logic of the application.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a class="hash-link" href="#summary" title="Direct link to heading">​</a></h2><p>This article explains Move's attempts to implement on-chain smart contracts and the challenges faced by current smart contracts in terms of dependency and composability. Based on these attempts, the article also explores the potential for Move ecosystem building.</p><blockquote><p>Afterword: When writing this article, the Rooch project had not yet been created, but ideas about layered solution and DApp building had been brewing in my mind for a long time. Rooch is an answer to how to use Move to build DApp beyond DeFi. For more details, please see the article "<a href="https://rooch.network/blog/modular-evolution-of-rollup-layer2" target="_blank" rel="noopener noreferrer">The Modular Evolution of Rollup Layer2</a>".</p></blockquote><h4 class="anchor anchorWithStickyNavbar_LWe7" id="links">Links<a class="hash-link" href="#links" title="Direct link to heading">​</a></h4><ol><li><a href="https://github.com/move-language/move" target="_blank" rel="noopener noreferrer">https://github.com/move-language/move</a> The new repository of the Move project</li><li><a href="https://github.com/MystenLabs/awesome-move" target="_blank" rel="noopener noreferrer">awesome-move: Code and content from the Move community</a></li><li><a href="https://vitalik.ca/general/2022/01/26/soulbound.html" target="_blank" rel="noopener noreferrer">Soulbound (vitalik.ca)</a> Vitalik's article about NFT Soulbound</li><li><a href="https://github.com/starcoinorg/sips/blob/master/sip-22/index.md" target="_blank" rel="noopener noreferrer">SIP22 NFT</a> Starcoin's NFT standard, including the explanation of IdentifierNFT</li><li><a href="https://jolestar.com/bitcoin-smart-contract/" target="_blank" rel="noopener noreferrer">Unlocking the "Three Locks" of Bitcoin Smart Contracts (jolestar.com)</a></li></ol>]]></content>
        <author>
            <name>Jolestar</name>
            <uri>https://github.com/jolestar</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Modular Evolution of Rollup Layer2]]></title>
        <id>modular-evolution-of-rollup-layer2</id>
        <link href="https://rooch.network/blog/modular-evolution-of-rollup-layer2"/>
        <updated>2023-02-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This article attempts to discuss the development and evolution of Rollup Layer2 from an evolutionary perspective, mainly addressing the following questions:]]></summary>
        <content type="html"><![CDATA[<p>This article attempts to discuss the development and evolution of Rollup Layer2 from an evolutionary perspective, mainly addressing the following questions:</p><ol><li>How does Rollup work?</li><li>Modular evolution of Rollup</li><li>Possibilities brought by Modular</li><li>Technological trends in modular application</li><li>Conclusion</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-does-rollup-work">How does Rollup work?<a class="hash-link" href="#how-does-rollup-work" title="Direct link to heading">​</a></h2><p>The "trilemma" of blockchain has always been a difficult problem in the industry. If we consider that Layer1 blockchain should first ensure "decentralization" and "security," migrating the "scalability" solution out of Layer1 is a natural choice, hence Layer2. The new problem is how to ensure the security of Layer2 through Layer1.</p><p>Initially, there was an idea to periodically write the state tree root of the Layer2 application to Layer1, which could verify the application state through state proof, similar to the reserve proof of CEX. However, third parties cannot verify that two state transitions are correct in a public manner using this approach.</p><p>To further explore this problem, let's abstract it. The state of any program can be expressed through a state transition formula:</p><div class="language-math codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-math codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">σt+1 ≡ Υ(σt, T)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This formula comes from the Ethereum Yellow Paper, but it can represent any program. Here, Υ represents the program, and σ represents the state. State σt+1 is calculated by program Y through state σt and transaction T. Transaction T represents the input to the program. <strong>At any time, if σt is deterministic, Y is deterministic, and T is deterministic, then σt+1 is deterministic.</strong></p><p>So to provide public verifiability, the key is for Y to be publicly available, all historical T to be publicly available, and for their order to be determined. The intermediate states can be recalculated through Y and T. We can achieve the public availability of the program through open source, but how to ensure the public availability of T is another issue, which introduces the concept of data availability (DA).</p><p><strong>Data availability</strong> requires a publicly available and immutable ledger to record the transactions of the application. The blockchain ledger is a system that naturally comes to mind. Therefore, writing Layer2 transactions back to Layer1 to ensure data availability is the origin of the name Rollup.</p><p>Therefore, a role is needed in the Layer2 system to collect users' transactions, sort them, and write them to DA. This role is called the <strong>Sequencer</strong>. The transaction sequence here is called the <strong>Canonical Transaction Chain</strong>.</p><p>With data availability guaranteed, everyone can obtain the final state by running the program to execute transactions. However, consensus has not been reached yet, as everyone is uncertain whether the results obtained by them are consistent with those of others, as software or hardware failures can lead to data inconsistency. Therefore, another role is needed to periodically publish the state tree root after executing transactions, which can be used by everyone to verify their own state. This role is called the <strong>Proposer</strong>. The submitted state also forms a state sequence corresponding to the transaction sequence, called the <strong>State Commitment Chain</strong>.</p><p>At this point, we have achieved the verifiability of the application. But if someone's result is inconsistent with the state submitted by the proposer, and it is determined that the problem is not with themselves, then it means the proposer cheated or made a mistake. How can others know about this? This requires the role of an <strong>Arbitrator</strong>. The arbitrator needs to be a trusted third party, which can be fulfilled by a contract on the chain.</p><p>There are two arbitration schemes for rollups:</p><ol><li>Each time the Proposer submits a state, they also provide the <strong>validity proof</strong>, which proves the validity of state transition between the current state and the previous one, and is verified by the arbitration contract on-chain. The validity proof is generated using zero-knowledge techniques, which is called <strong>ZK Rollup</strong>.</li><li>Assuming the Proposer's results are correct, but if inconsistencies are found, <strong>fraud proof</strong> is submitted, which is judged by the arbitration contract. If the arbitration contract determines that the Proposer has cheated, the Proposer will be penalized, and the State Commitment Chain will be rolled back to the state before the fraudulent transaction. Of course, to ensure safety, a relatively long challenge period is usually set to achieve the final settlement of on-chain transactions. This is called <strong>Optimistic Rollup</strong>.</li></ol><p>We also need to achieve asset interoperability between Layer1 and Layer2. Therefore, we build a bridge between Layer1 and Layer2, and use state proofs for asset settlement between them. Layer2's state root on Layer1 is guaranteed by Layer1's arbitration contract, so the security of this bridge is also guaranteed by the arbitration contract.</p><p>At this point, we have obtained a Rollup Layer2 solution secured by Layer1 which allows for asset interoperability with Layer1.</p><p><img loading="lazy" alt="Rollup layer2" src="/assets/images/rollup-layer2-b8f8b3ef5460c8c8d0ee339045b63384.svg" width="461" height="301" class="img_ev3q"></p><p>Of course, the Rollup solution has made some compromises:</p><ol><li>Writing transactions to Layer1 means that the scalability of Layer2 is still limited by Layer1's block size. For example, in Ethereum, if a Layer2 fully occupies all Ethereum blocks, the average TPS it can provide is only a few hundred, and its scalability is limited by DA.</li><li>In order to save gas fees, the Sequencer will batch transactions into DA. Before writing to DA, the Sequencer may cheat by adjusting the order of transactions.</li></ol><p>Here's a summary of the security and finality of transactions in Layer2:</p><ol><li>If a user runs a Layer2 node and executes transactions in the order provided by the DA, the user can assume that the transactions are instantly confirmed and eventually settled because if the result of the user's execution differs from that of the Proposer, it indicates that the Proposer cheated and the on-chain state needs to be rolled back, which will eventually match the result of the user's own node. The main risk here is the risk mentioned earlier, which is the risk associated with the Sequencer adjusting the order of transactions that have not yet been written to the DA when syncing data in real-time.</li><li>If a user cannot run a node themselves and relies on an RPC provider, the user needs to take on a certain level of trust risk. However, this risk is similar to the risk of trusting a Layer1 RPC node. The additional risk here is the risk of the Sequencer discarding or rearranging transactions.</li><li>If the Proposer is wrong but no node initiates a challenge and the challenge period expires, the incorrect state cannot be rolled back, and the state can only be repaired through a hard fork by social consensus.</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="modular-evolution-of-rollup">Modular evolution of Rollup<a class="hash-link" href="#modular-evolution-of-rollup" title="Direct link to heading">​</a></h2><p>Based on the previous analysis, in the Rollup solution, multiple contracts on the chain play different roles and represent different modules. It is natural to think about whether modules can be split across multiple chains to achieve higher scalability. This is the idea of modular blockchain and modular Rollup.</p><p>Modular has two meanings here:</p><ol><li>Through modular design, the system becomes a plug-and-play system. Developers can meet different application scenario requirements through module assembly.</li><li>Based on the ability provided by 1, the implementation of the modular layer is not bound to the same Layer1, thus obtaining better scalability.</li></ol><p>There are three main modular layers that we can consider:</p><ul><li><strong>Data Availability Layer</strong>: Ensures that the transaction data of the execution layer can be obtained in a public way, and ensures the transaction sequence.</li><li><strong>Settlement Layer</strong>: Implements asset and state settlement between Layer1 and Layer2. It includes the State Commitment Chain and the Bridge.</li><li><strong>Arbitration Layer</strong>: Verifies fraud proofs and makes judgments (optimistic) or verifies valid proofs (ZK). The arbitration layer must have the ability to manipulate the State Commitment Chain.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="da-modular">DA Modular<a class="hash-link" href="#da-modular" title="Direct link to heading">​</a></h3><p>By migrating the DA function out and using an independent solution, the primary benefit is that the transaction gas fee of Layer2 is reduced by at least one order of magnitude.</p><p>From a security perspective, even if the decentralization of the DA chain is weaker than Ethereum, the main guarantee of the security of the DA layer is the transactions during the challenge period. After the challenge period, the DA is mainly used to facilitate other nodes to synchronize data, and it does not have a security guarantee. Therefore, the requirement for decentralization can be reduced by one level.</p><p>A DA dedicated chain can provide higher storage bandwidth and lower storage costs, and can be specifically designed for multiple applications to share the DA. This is also the foundation of current DA chains like Celestia and Polygon Avail.</p><p>After splitting the DA layer, we obtain the architecture shown in the figure below:</p><p><img loading="lazy" alt="Modular Rollup layer2" src="/assets/images/modular-rollup-layer2-66d58dcaf96352ee734ce0be161b64e2.svg" width="461" height="330" class="img_ev3q"></p><p>In the above figure, the DA is responsible for saving the Canonical Transaction Chain, and Layer1 is left with an L1ToL2 Transaction Queue to implement message communication between Layer1 and Layer2. Users can also write transactions directly to this queue to ensure the  Layer2 is permissionless and that the Sequencer cannot audit users or transactions.</p><p>However, a new problem arises here. If the transaction sequence written by the Sequencer into the DA and the transaction sequence executed by the Proposer are inconsistent, how will the arbitration contract judge? One solution is to have a cross-chain bridge between the DA chain and the arbitration chain, which verifies the data proof provided by the DA chain in the arbitration contract. However, this solution depends on the implementation of cross-chain bridges between the DA and other chains, and the DA solution selection will be restricted. Another solution is to introduce Sequence proof.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="sequence-proof">Sequence Proof<a class="hash-link" href="#sequence-proof" title="Direct link to heading">​</a></h3><p>We can think of Sequencer as part of the DA solution. It is equivalent to an app-specific DA and has the following responsibilities:</p><ol><li>Sequencer needs to provide DA guarantees for the time period before batch the transactions into the DA chain.</li><li>Sequencer needs to verify, sort, and finally write transactions into the DA.</li></ol><p>If Sequencer generates a Sequence Proof for each transaction, it can solve two problems:</p><ol><li>It provides a guarantee for transactions that have not been written into the DA chain, making it difficult for Sequencer to arbitrarily adjust the order or discard transactions.</li><li>If there is no cross-chain bridge between the DA chain and the arbitration chain, the availability of data can be ensured through the challenge mechanism of Sequence Proof.</li></ol><p><strong>Sequence Proof</strong> has the following characteristics:</p><ol><li>It carries the signature of the Sequencer, proving that it was issued by a specific Sequencer.</li><li>It can prove the position of a transaction in the entire transaction sequence.</li><li>It is a type of accumulator proof. Each transaction generates a new accumulation result after being accumulated, which is related to all historical transactions before it. This makes it difficult to tamper with the results. One of the optional solutions for the accumulator is the Merkle Accumulator, and the accumulation result is represented by the root of the Merkle Tree.</li></ol><p>How Sequence Proof works:</p><p><img loading="lazy" alt="Sequence Proof" src="/assets/images/rooch-sequence-proof-c50a9c56323c6d5ca664a9da59a7391d.svg" width="722" height="437" class="img_ev3q"></p><p>A user or an execution node submits a transaction to the Sequencer. The Sequencer returns the Sequence Proof to the user and synchronizes it with other nodes. If the Sequencer discards or changes the order of transactions before submitting them to the DA, the user or other nodes can submit the Sequence Proof to the arbitration contract to slash the Sequencer. The arbitration contract needs to read the root of the transaction accumulator from the State Commitment Chain contract to verify the Sequence Proof.</p><p>Let's discuss the following scenarios:</p><ol><li>Sequencer discards or rearranges user transactions, which leads to the Sequencer generating two Sequence Proofs at the same position. The user submits the Sequence Proof to the arbitration contract, and the Sequencer needs to provide proof that the transaction is included in the root of the latest transaction accumulator. If it cannot provide the proof, it will be slashed.</li><li>Sequencer fails to write transactions into the DA chain correctly and colludes with the Proposer to hide transactions. If there is a bridge between the DA chain and the arbitration chain, verification can be done through the bridge to slash the Sequencer. Otherwise, the user can initiate a challenge to require the Sequencer to provide proof of a transaction's position and original information. In this case, the arbitration contract cannot judge whether the user is making a malicious challenge, so the Sequencer will not be slashed if it provides the data. For users, making a malicious challenge is not beneficial and lacks economic incentives.</li></ol><p>By introducing Sequence Proof, Layer2 protocols become more secure.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="transaction-pipeline-and-parallel-execution">Transaction Pipeline and Parallel Execution<a class="hash-link" href="#transaction-pipeline-and-parallel-execution" title="Direct link to heading">​</a></h3><p>By assigning the Sequencer to the DA to solely handle transaction validation and sorting, another benefit is that it is easy to implement a transaction pipeline and parallel execution.</p><p><img loading="lazy" alt="Transaction Pipeline" src="/assets/images/rooch-txn-pipeline-b8c0fa9abc8c1308eb6b4daf29000c55.svg" width="764" height="149" class="img_ev3q"></p><p>When validating a transaction, it is necessary to verify the signature and whether there is sufficient gas fee, and gas fee verification relies on the state. If we allow the Sequencer to verify transactions with a certain delay (in seconds) between the dependent state and the latest state to ensure that validation transactions are not blocked by executing transactions, then gas verification may be inaccurate and at risk of DDoS attacks.</p><p>However, we believe that assigning the Sequencer to the DA is a correct direction, so it is worth further research. For example, the DA part of the transaction fee can be split out and expressed through the UTXO (Sui Move Object) to reduce the cost of gas fee checking.</p><p>The Sequencer sorts the transactions and outputs them into a transaction pipeline, which is then synchronized to the Proposer and other nodes. Each node can choose a parallel execution scheme based on its own server situation. Each node needs to ensure that only transactions without causal relationships are executed in parallel, and transactions with causal relationships must be executed in the order of the Sequencer, so that the final result is consistent.</p><p>The Proposer needs to periodically submit the root of the state tree and the root of the accumulator to the State Commitment Chain contract on the chain.</p><p>So we have a modular Layer2 with low gas fees, high TPS, and greater security, this is <strong>Rooch</strong>.</p><p><img loading="lazy" alt="Rooch Architecture" src="/assets/images/rooch-architecture-9414770217ec12ad7cc101673861c921.svg" width="471" height="281" class="img_ev3q"></p><ul><li>MoveOS: It includes MoveVM and StateDB, which are the system's execution and state storage engines. StateDB is built with two layers of Sparse Merkle trees and can provide state proofs. As mentioned earlier, the state tree and state proof are indispensable components of Rollup applications.</li><li>RPC: Provides query, transaction submission, and subscription services to the outside world. Can be compatible with other chain's RPC API through proxying.</li><li>Sequencer: Verifies transactions, sorts transactions, provides sequence proof, and streams transactions into the transaction pipeline.</li><li>Proposer: Retrieves transactions from the transaction pipeline, batch executes them, and periodically submits them to the State Commitment Chain on the chain.</li><li>Challenger: Retrieves transactions from the transaction pipeline, batch executes them, compares them with the State Commitment Chain, and decides whether to initiate a challenge.</li><li>DA &amp; Settlement &amp; Arbitration Interface: Abstracts and encapsulates different modular layers to ensure that switching between different implementations does not affect the upper-level business logic.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="interactive-fraud-proofs-with-multi-chain-support">Interactive Fraud Proofs with Multi-Chain Support<a class="hash-link" href="#interactive-fraud-proofs-with-multi-chain-support" title="Direct link to heading">​</a></h3><p>In the Optimistic Rollup solution, it has always been a challenge for on-chain arbitration contracts to determine when off-chain transactions have been executed incorrectly. The initial idea was to re-execute Layer2 transactions on Layer1, but the difficulty with this approach is that Layer1 contracts would have to simulate Layer2 transaction execution, which would be costly and limit the complexity of Layer2 transactions.</p><p>The industry eventually came up with an interactive proof scheme. Since any complex transaction ultimately boils down to machine instructions, if we can identify the diverging instructions, we can simply simulate the execution of instructions on the chain.</p><p>Using the same state transition formula as before:</p><div class="language-math codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-math codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">σt+1 ≡ Υ(σt, T)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>where Υ represents an instruction, T represents instruction input, and σ represents the memory state that the instruction depends on. If a state proof is generated for each σ during execution, the two parties in a dispute can interactively identify the divergence point m, and submit state σ m-1 and instruction m to the on-chain arbitration contract for simulation. The arbitration contract can then provide a judgement after execution.</p><p>The remaining question is how to generate the proof, and there are mainly two approaches:</p><ol><li>Implement it directly in the contract language virtual machine, such as Arbitrum's AVM and Fuel's FuelVM.</li><li>Implement a simulator based on an existing instruction set, which can provide proof capabilities within the simulator. For example, Optimism's MIPS-based cannon, Arbitrum's new WASM-based Nitro, and Rooch's MIPS-based OMO.</li></ol><p><img loading="lazy" alt="OMO" src="/assets/images/rooch-omo-4debe695e09475a856bfa56558e54d8e.svg" width="534" height="571" class="img_ev3q"></p><p>OMO is a general bytecode simulator with single-step state proof capabilities, designed for multi-chain execution environments. With support from OMO, the arbitration layer can be modular. Any chain that supports Turing-complete contracts can simulate OMO's instructions in its contracts and act as an arbitration layer.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="zk--optimistic-combination-solution">ZK + Optimistic Combination Solution<a class="hash-link" href="#zk--optimistic-combination-solution" title="Direct link to heading">​</a></h3><p>The industry has been debating the pros and cons of Optimistic Rollup and ZK Rollup, but we believe that combining the two can achieve the benefits of both solutions.</p><p><img loading="lazy" alt="ZK + Optimistic" src="/assets/images/rooch-zk-optimisc-4522c530deb98cde2291c1379ffd2c5a.svg" width="471" height="403" class="img_ev3q"></p><p>Based on the previous Optimistic solution, we introduce a new role, the ZK Prover. It generates valid proofs in bulk for the transaction states submitted by the Proposer, and submits them to the arbitration contract. After verification by the arbitration contract, the transaction can be settled from Layer2 to Layer1 for finality.</p><p>The advantages of this solution are:</p><ol><li>The overall throughput of Layer2 will not be limited due to the performance issues of ZK.</li><li>ZK can shorten the challenge period of Optimistic and improve user experience.</li></ol><p>Before the maturity of ZK solutions and hardware acceleration, we can build the ecosystem through Optimistic, and the modular solution can seamlessly integrate ZK in the future.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="multi-chain-settlement">Multi-Chain Settlement<a class="hash-link" href="#multi-chain-settlement" title="Direct link to heading">​</a></h3><p>If we further consider the trend of modular, it naturally leads to the question of whether the settlement layer can be deployed on another chain, since the DA can be migrated to another chain.</p><p>The asset settlement between Layer1 and Layer2 mainly relies on two components, one is the Bridge, and the other is the State Commitment Chain. When settling through the Bridge, it is necessary to rely on the State Commitment Chain to verify the Layer2's state proof. The Bridge can certainly be deployed on multiple chains, but there can only be one authoritative version of the State Commitment Chain, which is ensured by the arbitration contract.</p><p><img loading="lazy" alt="Multi chain Settlement" src="/assets/images/rooch-multi-chain-layer2-ca27c8f6b7976a37c5f5b3946212d50d.svg" width="733" height="382" class="img_ev3q"></p><p>This direction requires further research, but there is a preliminary solution. The State Commitment Chain on other chains is a mirror of the arbitration chain (Ethereum). This mirror does not need to synchronize all Layer2 State Roots to other chains, but users can map them as needed through Ethereum's state proof.</p><p>Of course, other chains also need to be able to verify the state proof on Ethereum, so they need to know the state root on Ethereum. Currently, there are two solutions for synchronizing Ethereum's state root to other nodes: 1. relying on an Oracle. 2. embedding an Ethereum light node to verify Ethereum's block header.</p><p><img loading="lazy" alt="Multi chain Settlement" src="/assets/images/rooch-multi-chain-settlement-e8dd4745381bbdb1c0fdf70a64eb0778.svg" width="531" height="172" class="img_ev3q"></p><p>In this way, we can get a Layer2 solution that supports multi-chain settlement, but whose security is guaranteed by Ethereum.</p><p>The difference between this solution and cross-chain is:</p><ol><li>If it is a cross-chain solution that relies on a relay chain, Layer2 can be regarded as replacing the relay chain and is a relay layer with security guaranteed by the arbitration contract.</li><li>If it is a cross-chain solution that verifies the state proof between chains, the multi-chain settlement solution shares the same technical solution for state root synchronization, but it is much simpler. Th synchronization requirement for state proofs is one-way in the multi-chain settlement solution, we only need to synchronize from the arbitration chain to other chains, rather than provide for two-way synchronization between each pair of chains.</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="possibilities-brought-by-modular">Possibilities brought by Modular<a class="hash-link" href="#possibilities-brought-by-modular" title="Direct link to heading">​</a></h2><p>Through modular, developers can combine Rooch with other components to create different applications.</p><ol><li><strong>Rooch Ethereum Layer2</strong> = Rooch + Ethereum (Settlement+Arbitration) + DA
This is the network that Rooch will initially run on. It provides a Move execution platform that is secured by Ethereum and can interoperate with assets on the Ethereum network. It can be expanded in the future to support settlement on multiple chains.</li><li><strong>Rooch Layer3 Rollup DApp</strong> = Rooch + DApp Move Contract + Rooch Ethereum Layer2 (Settlement+Arbitration) + DA
If an application deploys its settlement and arbitration to Rooch Layer2, it becomes a Rooch Layer3 application.</li><li><strong>XChain Rollup DApp</strong> = Rooch + DApp Move Contract + XChain (Settlement+Arbitration) + DA
Any chain can provide developers with a Move-based Rollup DApp toolkit through Rooch. Developers can write their own application logic in Move language, and run a Rollup application with security guaranteed by XChain, and can interoperate with assets on XChain. Of course, this requires collaboration with developers from each public chain.</li><li><strong>Sovereign Rollup DApp</strong> = Rooch + DApp Move Contract + DA
Applications can also use Rooch as a Sovereign Rollup SDK, without deploying the Bridge and Arbitration contracts. The State Commitment Chain is also saved on DA to ensure verifiability, with security ensured by social consensus.</li><li><strong>Arweave SCP DApp</strong> = Rooch + DApp Move Contract + DA (Arweave)
The SCP and Sovereign Rollup have similar ideas, where SCP requires the application code to be saved in the DA layer. In Rooch, contract deployment and upgrade are both transactions, and the contract code is in transaction, is written to the DA layer, so we believe it meets the SCP standard.</li><li><strong>Move DApp Chain</strong> = Cosmos SDK + MoveOS + DApp Move Contract
MoveOS can be embedded as an independent Move execution environment in the runtime environment of any chain to build application chains or new public chains.</li><li><strong>Non-Blockchain Projects</strong>
Non-blockchain projects can use MoveOS as a database with data verification and storage proof capabilities. For example, it can be used to build a local blog system, where data structure and business logic are expressed through Move. As the infrastructure matures, it can be directly integrated into the blockchain ecosystem. Another example is using it for FaaS services in cloud computing, where developers write functions in Move, and the platform manages the state. Functions can be combined and called. There are more possibilities to be explored.</li></ol><p>Rooch's modular design can adapt to applications of different types and stages. For example, developers can first validate their ideas by deploying contracts on the Rooch Ethereum Layer2, and then migrate the application to an independent App-Specific Rollup when it grows up.</p><p>Alternatively, developers can start the application directly through the Sovereign Rollup method, because in the early stages of the application, there is no high requirement for security, and there is no need to interoperate with assets on other chains. Later, as the application grows, and the need to interoperate with assets arises, and the security requirement increases, Settlement and Arbitration modularity can be enabled to ensure the security of the assets.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="technical-trends-of-modular-applications">Technical Trends of Modular Applications<a class="hash-link" href="#technical-trends-of-modular-applications" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="potential-of-da-has-yet-to-be-tapped">Potential of DA has yet to be tapped<a class="hash-link" href="#potential-of-da-has-yet-to-be-tapped" title="Direct link to heading">​</a></h3><p>From the previous analysis, it can be seen that regardless of the combination method, it depends on the DA layer. The role of the DA layer in decentralized applications is similar to the log platform in Web2 systems. It can be used for auditing, supporting big data analysis, and conducting AI training. Many applications and services will be built around the DA layer in the future. Currently, there are already DA chains such as Celestia, Polygoin avail, and there will be more in the future, such as EigenLayer, Ethereum danksharding, and so on.</p><p>According to the previous analysis, we conclude that the role of the Sequencer should belong to a part of the DA layer. If the DA layer can provide transaction verification capabilities for applications and has sufficient performance, the Sequencer's responsibilities can actually be fully borne by the DA layer, and users can directly write transactions to the DA layer. Of course, whether users can pay the Gas fee for DA with the application's token is another problem that needs to be solved.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dapp-programming-languages-will-explode">DApp programming languages will explode<a class="hash-link" href="#dapp-programming-languages-will-explode" title="Direct link to heading">​</a></h3><p>New application forms will promote the explosion of new programming languages, as already seen in the Web2 era. Move will become the best language for building Web3 DApps. In addition to Move's language features, the following reasons are based on:</p><ol><li>Using the same language for DApps can quickly accumulate the basic libraries needed for the application and form an ecosystem effect. Therefore, supporting multiple languages at the beginning is not a good strategy.</li><li>Decentralized applications must ensure verifiability at least, and smart contract languages can reduce many mental burdens for developers in ensuring verifiability.</li><li>Move's platform-agnostic nature makes it easy to adapt to different platforms and applications.</li><li>Move's state is structured, which is beneficial for DApp's data structure expression and storage retrieval.</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>I entered the blockchain industry at the end of 2017. at the time, many teams were trying to build applications on the blockchain. Unfortunately, the infrastructure was not yet complete and the industry had not yet figured out a replicable pattern for building applications. Most application-based projects failed, which was a blow to developers and investors. How should applications be built on the blockchain? This question has been on my mind for five years.</p><p>Now, with the maturity of Layer1, Layer2, and smart contracts, as well as modular infrastructure, the answer to this question has become gradually clearer.</p><p>I hope that in the upcoming wave of Web3 DApp explosion, Rooch can help developers build applications faster and truly land them.</p>]]></content>
        <author>
            <name>jolestar</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Partnership Announcement~ zkMove <> Rooch]]></title>
        <id>partnership-announcement-zkmove</id>
        <link href="https://rooch.network/blog/partnership-announcement-zkmove"/>
        <updated>2023-02-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[logo配色图]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://user-images.githubusercontent.com/99104408/218180814-bc9e1a02-baee-42a4-bb46-46925f33f5bb.png" alt="logo配色图" class="img_ev3q">
Rooch Network is delighted to announce its partnership with zkMove! Rooch will work closely with zkMove to bring its zk-rollup solution to Rooch’s fully interoperable, multi-chain ecosystem. Moreover we will explore new dApp usages and build the Move community together.</p><p>Zero-knowledge rollups or zk-rollups are a next-gen Layer2 scaling solution that enable blockchains to validate transactions faster and maintain low gas fees compared to traditional Layer 1s via a combination of on and off-chain processes. </p><p>zkMove is a zk-proof friendly Move language runtime environment. The initial idea of zkMove is to improve the programmability and composability of zk-proofs technology. </p><p>Some highlights of zkMove: </p><ol><li>A type safe zero-knowledge proof-friendly bytecode virtual machine </li><li>No compromise on performance while pursuing Turing completeness</li><li>Safe and efficient scaling and privacy engine</li></ol><p>For those readers interested in a deep dive into zkMove, there is a wealth of high quality information available at the zkMove medium (<a href="https://zkmove.medium.com/" target="_blank" rel="noopener noreferrer">https://zkmove.medium.com/</a>). The project is also hiring qualified engineers (<a href="https://www.zkmove.net" target="_blank" rel="noopener noreferrer">https://www.zkmove.net</a>)!</p><p>Rooch Network is committed to its partnership with zkMove, and together we will work to deliver the holy grail of blockchain on Rooch~ a fully interoperable, multi-chain ecosystem supported in part by zkMove’s layered solution.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Partnership Announcement~ MoveBit <> Rooch]]></title>
        <id>partnership-announcement-movebit</id>
        <link href="https://rooch.network/blog/partnership-announcement-movebit"/>
        <updated>2023-02-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[logo-4]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://user-images.githubusercontent.com/99104408/217911743-1d9f34bd-d79a-4ccb-bbb6-9f8460845b36.png" alt="logo-4" class="img_ev3q">
Rooch Network will partner with MoveBit to ensure the highest possible level of security independently verified by an expert third party. Founded by experts and professors in security, MoveBit is a blockchain security company focused on Move ecosystem security. MoveBit will soon be a household name in the security audit sector of the blockchain industry. </p><p>“MoveBit is a security audit company for the Move ecosystem with a vision to make the Move ecosystem the most secure Web3 destination. The MoveBit team is comprised of security leaders from academia and enterprise with 10 years of security experience. The team was one of the earliest contributors to the Move ecosystem, working with Move developers to set the standard for secure Move applications.” </p><p>Some of MoveBit’s recent audits include Aptos, Starcoin, Starcoin DAO, PolyNetwork, Starswap, Transit Finance, OmniBTC, MoveDID, and Cetus. </p><p>Rooch will secure independent formal verification through MoveBit audits during key stages of project development to ensure the utmost security and to create an atmosphere of trust for ecosystem participants. Security audits will be published in conjunction with MoveBit.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Partnership Announcement~ MoveFunsDao <> Rooch]]></title>
        <id>partnership-announcement-movefunsdao</id>
        <link href="https://rooch.network/blog/partnership-announcement-movefunsdao"/>
        <updated>2023-02-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[movefuns]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://user-images.githubusercontent.com/99104408/217434466-c5670401-0094-4386-b0de-699e25f31650.png" alt="movefuns" class="img_ev3q">
Rooch Network has an established partnership with MoveFunsDAO, "A DAO for Move developers, with the main goal of uniting the developer community to build across multiple Move chain ecosystems." At the date of this posting, MoveFunsDAO has gathered more than 250 Move developers for the purpose of collective action and learning within the broader Move ecosystem, including Aptos, Starcoin, and Sui.  </p><p>Most notably, MoveFuns has already organized a CTF MOVEment in December 2022 alongside organizers Aptos, Pontem Network, and Movebit, and we expect it to foster many great opportunities for developers rushing to Move. </p><p>MoveFunsDao &amp; Rooch will keep a close relationship with the goal of empowering developers so the greater Move ecosystem can flourish while we grow an ever larger developer community.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Rooch]]></title>
        <id>hello-rooch</id>
        <link href="https://rooch.network/blog/hello-rooch"/>
        <updated>2022-11-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[while]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="while" src="/assets/images/rooch_black_combine-770ef97632f359f78fcc569eb774e7be.png" width="453" height="136" class="img_ev3q"></p><p>A long, long time ago in a galaxy, far, far, wait– January 3rd, 2009, bitcoin went live on mainnet with the mining of its genesis block, and the blockchain was born. It wasn’t until 2015 that Ethereum 1.0 broke out onto the scene, delivering its landscape altering smart contracts. Ever since the blockchain industry has been rapidly iterating. Today, a pantheon of Layer1s have risen to the fore, delivering a suite of sophisticated features and application scenarios that have begun to disrupt traditional finance as we know it.</p><p>Baked into blockchain is the need to iterate, to seek the most optimal expression of crypto technology. And the holy grail is decentralized native multi-chain settlement that makes no sacrifices in its quest for throughput, security, or centralization. What if I told you Rooch Network can deliver on this dearest wish?</p><p>Rooch was one of the earliest infrastructure teams focused on layered solutions and the Move ecosystem. In 2018 the team focused on layer2 solutions for bitcoin’s lightning network, and after building the first Move-based state channel on libra in 2019, our team built the first Move public blockchain: Starcoin, then through 2022 created the Starcoin Framework, DeFi application scenarios, Bridges, MoveJS, MovefunsDAO, &amp; DAOspace. In 2022 the Rooch team designed OMO, a general bytecode emulator with per-step state proof, which can be used to generate fraud proofs for optimistic rollup. OMO will be deployed on Rooch with zkMove, a ZK-rollup project we have an established partnership with. Rooch's architecture combines Optimistic &amp; ZK via its ZK Prover, achieving the benefits of both solutions.</p><p>There’s a reason a project like Rooch doesn’t exist yet… only Rooch’s team has the technical ability and experience to bring a project of this magnitude to market.</p><p>Rooch core team is made strong by its emphasis on decentralization, with its core founding members scattered across the world. Jolestar is our Move Master Jedi, the Architect of Starcoin, a genius founder committed to high ideals. Triplex is a Einstein Quant developer with years of experience in distributed storage, and has the big brain to go with it. Chirstina Li wears many hats in service of Rooch, and has a wealth of investment experience in fintech (figure, klarna) before she applied her skills to web3 at Helium. Joe Chen, a core member of Rooch, literally translated the book on Move, MoveBook. Haichao is our team’s glue, an accomplished DevRel from Algorand &amp; Aptos. Ren is Rooch’s Marketing lead, an entrepreneur with several businesses &amp; a published author, graduated magna cum laude from LMU with a Bachelor’s in Business Administration. Lerencao was a core dev at Starcoin, is the Architect of Rooch’s OMO, and has years of blockchain experience. Sven is our resident Web2 expert, produced web2 games, and is the dev for DAOspace. We have the architect of MoveJS, Owen WU, a battle-hardened Move dev &amp; full-stack developer, and 0xpause, a former AI engineer that cut his dev teeth at starcoin helping build the Starcoin Framework and DAOspace. WillQ is an expert in compiler, EVM, and Rust. Lshoo is a senior developer and architect with more than 10 years of web2 development experience supported by deep competencies in Scala, Rust, WebAssembly &amp; Move, and work experience at Cosmos and Substrate. Roy Lieu is an expert in VM with years of experience in VM development.</p><p>Rooch is THE team uniquely positioned to leverage its applied technical experience to produce a miracle in blockchain tech: Rooch Network: a modular layer2 with multi-chain settlement powered by Move language and secured by Ethereum. Almost any web2 App can be refactored into a web3 DApp by the Rooch modular framework.</p><p>Rooch will implement a generic and verifiable contract execution environment. The overall idea is inspired by Cannon, and borrows part of its implementation from the Qiling framework. The network boasts throughput at 100,000 TPS.</p><p>On its Layer2, Rooch supports Decentralized ID, a plug-and-play DAO framework that supports fully on-chain voting and governance, Wallets with increased security thanks to Move, DEX, DeFi protocols, &amp; Marketplaces. In the case of a project building on Rooch that requires a large scale NFT issuance, such as NFT minting in the tens of millions or hundreds of millions issuance, Rooch will allow the entire process from collection planning to minting to future trading to be fully on-chain, and always trackable. So if Instagram wants to have all of its pics produced everyday as NFTs, Rooch can do that. Additionally, for NFT props in GameFi projects on Rooch, we will be able to enable the props to upgrade or level up into more powerful items while ensuring the whole process and item features remain coherent on-chain.</p><p>Here’s an industry shattering capability–  not only does Rooch significantly enhance smart contract security, it opens the door to multi-chain token &amp; NFT launches. Any team worth its salt will rush to Rooch for this feature alone.</p><p>Rooch’s Layer3 opens up a new frontier with its instant transaction confirmation and distributed P2P network. The bread and butter of web2, micropayments, are brought back from the dead for blockchain. Any application can leverage the rooch-enabled P2P network to enable microtransactions, all they have to do is pay the network fee per byte, no proof of storage required. Rooch’s Modular DApp framework lets projects broaden their target market in the planning stage, while the move language and its modules shrink the development window for faster time to market. </p><p>Rooch is the missing link, the golden goose that will deliver on the “ancient” promise of a decentralized, fast &amp; secure, multi-chain world.</p><p><img loading="lazy" alt="Rooch banner" src="/assets/images/rooch-banner-a84a233143e262ab4071b2c0a918f6e0.png" width="960" height="480" class="img_ev3q"></p>]]></content>
    </entry>
</feed>